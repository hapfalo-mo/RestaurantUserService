// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: restaurantuserservicerpb/userservice.proto

package restaurantuserservicerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RestaurantUserService_Sum_FullMethodName                = "/restaurantuserservice.RestaurantUserService/Sum"
	RestaurantUserService_IsAcceptUserAccess_FullMethodName = "/restaurantuserservice.RestaurantUserService/IsAcceptUserAccess"
)

// RestaurantUserServiceClient is the client API for RestaurantUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestaurantUserServiceClient interface {
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumReponse, error)
	IsAcceptUserAccess(ctx context.Context, in *IsVerifyUserRequest, opts ...grpc.CallOption) (*IsVerifyUserResponse, error)
}

type restaurantUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestaurantUserServiceClient(cc grpc.ClientConnInterface) RestaurantUserServiceClient {
	return &restaurantUserServiceClient{cc}
}

func (c *restaurantUserServiceClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumReponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SumReponse)
	err := c.cc.Invoke(ctx, RestaurantUserService_Sum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantUserServiceClient) IsAcceptUserAccess(ctx context.Context, in *IsVerifyUserRequest, opts ...grpc.CallOption) (*IsVerifyUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsVerifyUserResponse)
	err := c.cc.Invoke(ctx, RestaurantUserService_IsAcceptUserAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestaurantUserServiceServer is the server API for RestaurantUserService service.
// All implementations must embed UnimplementedRestaurantUserServiceServer
// for forward compatibility.
type RestaurantUserServiceServer interface {
	Sum(context.Context, *SumRequest) (*SumReponse, error)
	IsAcceptUserAccess(context.Context, *IsVerifyUserRequest) (*IsVerifyUserResponse, error)
	mustEmbedUnimplementedRestaurantUserServiceServer()
}

// UnimplementedRestaurantUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRestaurantUserServiceServer struct{}

func (UnimplementedRestaurantUserServiceServer) Sum(context.Context, *SumRequest) (*SumReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedRestaurantUserServiceServer) IsAcceptUserAccess(context.Context, *IsVerifyUserRequest) (*IsVerifyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAcceptUserAccess not implemented")
}
func (UnimplementedRestaurantUserServiceServer) mustEmbedUnimplementedRestaurantUserServiceServer() {}
func (UnimplementedRestaurantUserServiceServer) testEmbeddedByValue()                               {}

// UnsafeRestaurantUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestaurantUserServiceServer will
// result in compilation errors.
type UnsafeRestaurantUserServiceServer interface {
	mustEmbedUnimplementedRestaurantUserServiceServer()
}

func RegisterRestaurantUserServiceServer(s grpc.ServiceRegistrar, srv RestaurantUserServiceServer) {
	// If the following call pancis, it indicates UnimplementedRestaurantUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RestaurantUserService_ServiceDesc, srv)
}

func _RestaurantUserService_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantUserServiceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantUserService_Sum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantUserServiceServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantUserService_IsAcceptUserAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsVerifyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantUserServiceServer).IsAcceptUserAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantUserService_IsAcceptUserAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantUserServiceServer).IsAcceptUserAccess(ctx, req.(*IsVerifyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RestaurantUserService_ServiceDesc is the grpc.ServiceDesc for RestaurantUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestaurantUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restaurantuserservice.RestaurantUserService",
	HandlerType: (*RestaurantUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _RestaurantUserService_Sum_Handler,
		},
		{
			MethodName: "IsAcceptUserAccess",
			Handler:    _RestaurantUserService_IsAcceptUserAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "restaurantuserservicerpb/userservice.proto",
}
